<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer = 3;
node = 5;
input_count = 2;
output_count = 1;



//create neuron table
neuron[0] = ds_grid_create(1, input_count + 1);
for(var l = 1; l &lt; layer - 1; l++)
{
    neuron[l] = ds_grid_create(ds_grid_height(neuron[l - 1]) + 2, node + 1);
}
neuron[layer - 1] = ds_grid_create(ds_grid_height(neuron[layer - 2]) + 2, output_count + 1);
/*
neuron table
node0: [value, bias, w1, w2, ...]
node1: [value, bias, w1, w2, ...]
node2: [value, bias, w1, w2, ...]
node3: [value, bias, w1, w2, ...]
node4: [value, bias, w1, w2, ...]
trick node: [1, bias, 0, 0, ...]
*/

//initialize node
for(var l = 1; l &lt; layer; l++)
{
    for(var i = 0; i &lt; ds_grid_height(neuron[l]) - 1; i++)
    {
        ds_grid_set(neuron[l], 0, i, 0); // output
        ds_grid_set(neuron[l], 1, i, random(10) - 5); // bias
        for(var w = 0; w &lt; ds_grid_height(neuron[l - 1]); w++) // weights
            ds_grid_set(neuron[l], 2 + w, i, random(10) - 5);
    }
}
for(var l = 0; l &lt; layer - 1; l++)
{
    //init trick node
    ds_grid_set(neuron[l], 0, ds_grid_height(neuron[l]) - 1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///for debug
ds_grid_set(neuron[0], 0, 0, mouse_y / room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///neuron update
for(var l = 1; l &lt; layer; l++)
for(var n = 0; n &lt; ds_grid_height(neuron[l]) - 1; n++)
{
    var pre_layer_node_count = ds_grid_height(neuron[l - 1]), bias = grid(neuron[l], 1, n);
    var z = 0;
    for(var w = 0; w &lt; pre_layer_node_count; w++)
    {
        var ww = grid(neuron[l], 2 + w, n) //weights
        ,in = grid(neuron[l - 1], 0, w); //input
        z += ww * in;
    }
    ds_grid_set(neuron[l], 0, n, sigmoid(z + bias));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if true
{
    var dx = 50, dy = 50; //draw point
    var nw = 100, nh = 45; //neuron box size
    var mw = 20, mh = 15; //neuron box margin
    
    for(var l = 0; l &lt; layer; l++)
    for(var n = 0; n &lt; ds_grid_height(neuron[l]); n++)
    {
        draw_set_alpha(1);
        color(c_white);
        draw_rectangle(dx + (nw + mw) * l, dy + (nh + mh) * n, 
                    dx + (nw + mw) * l + nw, dy + (nh + mh) * n + nh, 0); // bg
                    
        color(c_gray);
        draw_rectangle(dx + (nw + mw) * l, dy + (nh + mh) * n, 
                    dx + (nw + mw) * l + nw, dy + (nh + mh) * n + nh * grid(neuron[l], 0, n), 0); // output visualization
                    
        color(c_black);
        draw_rectangle(dx + (nw + mw) * l, dy + (nh + mh) * n, 
                    dx + (nw + mw) * l + nw, dy + (nh + mh) * n + nh, 1); // outline
        color(c_black);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        draw_text(dx + (nw + mw) * l + 2, dy + (nh + mh) * n + 2, "val: " + string(grid(neuron[l], 0, n)));
        if (l &gt; 0)
        draw_text(dx + (nw + mw) * l + 2, dy + (nh + mh) * n + 2 + 20, "bias: " + string(grid(neuron[l], 1, n)));
        
        // weights
        if (l &gt; 0)
        for(var w = 0; w &lt; ds_grid_height(neuron[l - 1]); w++)
        {
            draw_set_alpha(grid(neuron[l], 2 + w, n));
            color(c_black);
            draw_line(dx + (nw + mw) * (l - 1) + nw, dy + (nh + mh) * w + nh / 2, 
                    dx + (nw + mw) * l, dy + (nh + mh) * n + nh / 2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///saving neuron data
ini_open("neuron.ini");
ini_write_real("info", "layer", layer);
ini_write_real("info", "node", node);
ini_write_real("info", "input_count", input_count);
ini_write_real("info", "output_count", output_count);

for(var l = 0; l &lt; layer; l++)
for(var h = 0; h &lt; ds_grid_height(neuron[l]); h++)
for(var w = 0; w &lt; ds_grid_width(neuron[l]); w++)
{
    ini_write_real("data", string(l) + ',' + string(w) + ',' + string(h), grid(neuron[l], w, h));
}
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
